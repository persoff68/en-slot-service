package com.escapenavigator.slot.service;

import com.escapenavigator.slot.model.Template;

import com.escapenavigator.slot.error.ModelAlreadyExistsException;
import com.escapenavigator.slot.error.ModelNotFoundException;
import com.escapenavigator.slot.repository.TemplateRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;

/**
 * Создание шаблона простое
 * 
 * Редактировать шаблон можно только если нет игр на слоты с данным шаблоном
 * При редактировании шаблона необходимо перегенерировать все слоты, использующие данный шаблон в Schedule
 * 
 * Удалить шаблон можно, только если он не используется в Schedule
 */

@Service
@RequiredArgsConstructor
public class TemplateService {

    private final TemplateRepository templateRepository;
    private final SlotService slotService;

    public Template getById(UUID id) {
        return templateRepository.findById(id)
                .orElseThrow(ModelNotFoundException::new);
    }

    public List<Template> getByProfile(UUID profileId) {
        return templateRepository.findByProfileId(profileId);
    }

    public Template create(Template template) {
        if (template.getId() != null) {
            throw new ModelAlreadyExistsException();
        }

        return templateRepository.save(template);
    }

    public Template update(Template template) {
        if (templateRepository.existsById(template.getId())) {
            throw new ModelNotFoundException();
        }

        // check if template.id is used in one of the slots which has order.id
        if (slotService.someHasTemplateId(template.getId())) {
            throw new Error();
        }

        // get all schedules, current or future, that are used in this template

        // remove all slots generated by this schedules

        // generate new slots on this schedule

        return templateRepository.save(template);
    }

    public void delete(UUID id) {
        if (templateRepository.existsById(id)) {
            throw new ModelNotFoundException();
        }

        // check if template.id is used in one of the schedules
        
        templateRepository.deleteById(id);
    }

}
